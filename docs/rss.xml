<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>小黄酱酱的博客</title><link>https://SaVeop.github.io</link><description>life sucks, but you're gonna love it!</description><copyright>小黄酱酱的博客</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://64.media.tumblr.com/54b7962c7fd7415a23501b01350a55e5/8589f1f7b7748eb0-be/s1280x1920/3384ef8a7a026ae58bef6492082a148db1af4912.jpg</url><title>avatar</title><link>https://SaVeop.github.io</link></image><lastBuildDate>Sat, 02 Aug 2025 06:06:22 +0000</lastBuildDate><managingEditor>小黄酱酱的博客</managingEditor><ttl>60</ttl><webMaster>小黄酱酱的博客</webMaster><item><title>开发日常拾遗（二十八）：Spring Boot JmxAutoConfiguration异常排查、日志占位符用法、Spring Cloud @RefreshScope热更新与依赖版本管理</title><link>https://SaVeop.github.io/post/kai-fa-ri-chang-shi-yi-%EF%BC%88-er-shi-ba-%EF%BC%89%EF%BC%9ASpring%20Boot%20JmxAutoConfiguration-yi-chang-pai-cha-%E3%80%81-ri-zhi-zhan-wei-fu-yong-fa-%E3%80%81Spring%20Cloud%20%40RefreshScope-re-geng-xin-yu-yi-lai-ban-ben-guan-li.html</link><description>## **1. Spring Boot 自动配置中的 `JmxAutoConfiguration` 错误**

### **问题：**

日志报错如下：

```vbnet
java.lang.IllegalStateException: Error processing condition on org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration.mbeanExporter
```

这种错误通常与 **Spring Boot 自动配置** 处理条件时出错有关，特别是 `JmxAutoConfiguration` 的 `mbeanExporter` 配置没有正确处理。</description><guid isPermaLink="true">https://SaVeop.github.io/post/kai-fa-ri-chang-shi-yi-%EF%BC%88-er-shi-ba-%EF%BC%89%EF%BC%9ASpring%20Boot%20JmxAutoConfiguration-yi-chang-pai-cha-%E3%80%81-ri-zhi-zhan-wei-fu-yong-fa-%E3%80%81Spring%20Cloud%20%40RefreshScope-re-geng-xin-yu-yi-lai-ban-ben-guan-li.html</guid><pubDate>Sat, 02 Aug 2025 06:05:56 +0000</pubDate></item><item><title>开发日常拾遗（二十七）：Linux rm命令参数、Docker RabbitMQ网络机制、队列状态解析及Spring Fanout Exchange Bean注入规则</title><link>https://SaVeop.github.io/post/kai-fa-ri-chang-shi-yi-%EF%BC%88-er-shi-qi-%EF%BC%89%EF%BC%9ALinux%20rm-ming-ling-can-shu-%E3%80%81Docker%20RabbitMQ-wang-luo-ji-zhi-%E3%80%81-dui-lie-zhuang-tai-jie-xi-ji-Spring%20Fanout%20Exchange%20Bean-zhu-ru-gui-ze.html</link><description>#### 1. **命令参数的含义**

##### 问题：

`rm -rf *.tar` 中 `-rf` 的含义是什么？

##### 解答：

- **`-r`**：递归删除目录及其内容。</description><guid isPermaLink="true">https://SaVeop.github.io/post/kai-fa-ri-chang-shi-yi-%EF%BC%88-er-shi-qi-%EF%BC%89%EF%BC%9ALinux%20rm-ming-ling-can-shu-%E3%80%81Docker%20RabbitMQ-wang-luo-ji-zhi-%E3%80%81-dui-lie-zhuang-tai-jie-xi-ji-Spring%20Fanout%20Exchange%20Bean-zhu-ru-gui-ze.html</guid><pubDate>Sat, 02 Aug 2025 06:04:52 +0000</pubDate></item><item><title>开发日常拾遗（二十六）：Java线程休眠、JMeter乱码解决、CSV编码配置与XA分布式事务历史解析</title><link>https://SaVeop.github.io/post/kai-fa-ri-chang-shi-yi-%EF%BC%88-er-shi-liu-%EF%BC%89%EF%BC%9AJava-xian-cheng-xiu-mian-%E3%80%81JMeter-luan-ma-jie-jue-%E3%80%81CSV-bian-ma-pei-zhi-yu-XA-fen-bu-shi-shi-wu-li-shi-jie-xi.html</link><description>#### **1. 线程休眠 0.5 秒的方法**

在 Java 中，让线程休眠（暂停执行）**0.5秒**可以使用 `Thread.sleep` 方法。</description><guid isPermaLink="true">https://SaVeop.github.io/post/kai-fa-ri-chang-shi-yi-%EF%BC%88-er-shi-liu-%EF%BC%89%EF%BC%9AJava-xian-cheng-xiu-mian-%E3%80%81JMeter-luan-ma-jie-jue-%E3%80%81CSV-bian-ma-pei-zhi-yu-XA-fen-bu-shi-shi-wu-li-shi-jie-xi.html</guid><pubDate>Sat, 02 Aug 2025 06:04:05 +0000</pubDate></item><item><title>开发日常拾遗（二十五）：Docker MySQL自启、concat用法、SDK定义、本地终端快捷、Sentinel及QPS含义与IDEA日志换行设置</title><link>https://SaVeop.github.io/post/kai-fa-ri-chang-shi-yi-%EF%BC%88-er-shi-wu-%EF%BC%89%EF%BC%9ADocker%20MySQL-zi-qi-%E3%80%81concat-yong-fa-%E3%80%81SDK-ding-yi-%E3%80%81-ben-di-zhong-duan-kuai-jie-%E3%80%81Sentinel-ji-QPS-han-yi-yu-IDEA-ri-zhi-huan-xing-she-zhi.html</link><description># 综合笔记：从Spring MySQL连接问题到QPS解释

## **1. Docker容器中MySQL服务的开机自启**

### 方法：

在 Docker 中，设置 MySQL 容器开机自启可以通过以下方式实现：

1. 使用 `--restart` 参数：

   ```bash
   docker run --name mysql-container -e MYSQL_ROOT_PASSWORD=123456 -d --restart always mysql:latest
   ```

   - `--restart always`：表示无论容器是否正常退出，都自动重启。</description><guid isPermaLink="true">https://SaVeop.github.io/post/kai-fa-ri-chang-shi-yi-%EF%BC%88-er-shi-wu-%EF%BC%89%EF%BC%9ADocker%20MySQL-zi-qi-%E3%80%81concat-yong-fa-%E3%80%81SDK-ding-yi-%E3%80%81-ben-di-zhong-duan-kuai-jie-%E3%80%81Sentinel-ji-QPS-han-yi-yu-IDEA-ri-zhi-huan-xing-she-zhi.html</guid><pubDate>Sat, 02 Aug 2025 06:02:45 +0000</pubDate></item><item><title>开发日常拾遗（二十三）：Spring Cloud 与 Nacos 服务映射解析及 @FeignClient 注解原理透析</title><link>https://SaVeop.github.io/post/kai-fa-ri-chang-shi-yi-%EF%BC%88-er-shi-san-%EF%BC%89%EF%BC%9ASpring%20Cloud%20-yu-%20Nacos%20-fu-wu-ying-she-jie-xi-ji-%20%40FeignClient%20-zhu-jie-yuan-li-tou-xi.html</link><description>### 1. Spring Cloud 与 Nacos 配置、服务映射问题分析

#### 1. **问题背景与初步分析**

- 遇到的问题是在本地 Spring Cloud 应用中，服务连接到 Nacos 时，发现 Nacos 服务在虚拟机上运行，但在日志中显示服务的 IP 地址为 `192.168.142.1`，而实际上该服务是在本地运行的。</description><guid isPermaLink="true">https://SaVeop.github.io/post/kai-fa-ri-chang-shi-yi-%EF%BC%88-er-shi-san-%EF%BC%89%EF%BC%9ASpring%20Cloud%20-yu-%20Nacos%20-fu-wu-ying-she-jie-xi-ji-%20%40FeignClient%20-zhu-jie-yuan-li-tou-xi.html</guid><pubDate>Sat, 02 Aug 2025 05:55:42 +0000</pubDate></item><item><title>开发日常拾遗（二十二）：Docker 拉取镜像与运行 Nacos 容器常见问题</title><link>https://SaVeop.github.io/post/kai-fa-ri-chang-shi-yi-%EF%BC%88-er-shi-er-%EF%BC%89%EF%BC%9ADocker%20-la-qu-jing-xiang-yu-yun-xing-%20Nacos%20-rong-qi-chang-jian-wen-ti.html</link><description>### **Docker 镜像下载和运行 nacos 容器的相关问题**

### **1. Docker 中如何下载镜像**

- **基本命令**：

  ```bash
  docker pull &lt;镜像名&gt;:&lt;标签&gt;
  ```

  - 如果省略标签，默认下载 `latest` 版本。</description><guid isPermaLink="true">https://SaVeop.github.io/post/kai-fa-ri-chang-shi-yi-%EF%BC%88-er-shi-er-%EF%BC%89%EF%BC%9ADocker%20-la-qu-jing-xiang-yu-yun-xing-%20Nacos%20-rong-qi-chang-jian-wen-ti.html</guid><pubDate>Sat, 02 Aug 2025 05:52:47 +0000</pubDate></item><item><title>开发日常拾遗（二十一）：Linux 基础命令、Docker 操作及 MySQL 容器实战笔记</title><link>https://SaVeop.github.io/post/kai-fa-ri-chang-shi-yi-%EF%BC%88-er-shi-yi-%EF%BC%89%EF%BC%9ALinux%20-ji-chu-ming-ling-%E3%80%81Docker%20-cao-zuo-ji-%20MySQL%20-rong-qi-shi-zhan-bi-ji.html</link><description>### **1. Linux 中的 `.`、`./` 和 `/` 的含义**

- **`.`（当前目录）**：

  - - 表示当前目录，是一个相对路径标识。</description><guid isPermaLink="true">https://SaVeop.github.io/post/kai-fa-ri-chang-shi-yi-%EF%BC%88-er-shi-yi-%EF%BC%89%EF%BC%9ALinux%20-ji-chu-ming-ling-%E3%80%81Docker%20-cao-zuo-ji-%20MySQL%20-rong-qi-shi-zhan-bi-ji.html</guid><pubDate>Sat, 02 Aug 2025 05:51:24 +0000</pubDate></item><item><title>开发日常拾遗（二十）：虚拟机与宿主机概念、MySQL Docker配置及常用命令</title><link>https://SaVeop.github.io/post/kai-fa-ri-chang-shi-yi-%EF%BC%88-er-shi-%EF%BC%89%EF%BC%9A-xu-ni-ji-yu-su-zhu-ji-gai-nian-%E3%80%81MySQL%20Docker-pei-zhi-ji-chang-yong-ming-ling.html</link><description>### 1. **虚拟机和宿主机概念**

- **宿主机（Host Machine）**：是物理机器，运行虚拟化软件的机器。</description><guid isPermaLink="true">https://SaVeop.github.io/post/kai-fa-ri-chang-shi-yi-%EF%BC%88-er-shi-%EF%BC%89%EF%BC%9A-xu-ni-ji-yu-su-zhu-ji-gai-nian-%E3%80%81MySQL%20Docker-pei-zhi-ji-chang-yong-ming-ling.html</guid><pubDate>Fri, 01 Aug 2025 10:39:54 +0000</pubDate></item><item><title>开发日常拾遗（十九）：Java Lambda引用详解、MyBatis-Plus查询行为、分页配置与属性复制</title><link>https://SaVeop.github.io/post/kai-fa-ri-chang-shi-yi-%EF%BC%88-shi-jiu-%EF%BC%89%EF%BC%9AJava%20Lambda-yin-yong-xiang-jie-%E3%80%81MyBatis-Plus-cha-xun-xing-wei-%E3%80%81-fen-ye-pei-zhi-yu-shu-xing-fu-zhi.html</link><description>### **1. 关于 `lambdaQuery()` 的参数引用问题**

- **问题描述**： `lambdaQuery().like(userName != null &amp;&amp; userName != '', UserQuery::getName, userName)` 中，`UserQuery::getName` 报错，提示无法从 static 上下文引用非 static 方法。</description><guid isPermaLink="true">https://SaVeop.github.io/post/kai-fa-ri-chang-shi-yi-%EF%BC%88-shi-jiu-%EF%BC%89%EF%BC%9AJava%20Lambda-yin-yong-xiang-jie-%E3%80%81MyBatis-Plus-cha-xun-xing-wei-%E3%80%81-fen-ye-pei-zhi-yu-shu-xing-fu-zhi.html</guid><pubDate>Fri, 01 Aug 2025 10:38:23 +0000</pubDate></item><item><title>开发日常拾遗（十八）：Lombok构造函数注入详解、@Autowired机制、方法引用、MyBatis-Plus参数说明及ID生成机制</title><link>https://SaVeop.github.io/post/kai-fa-ri-chang-shi-yi-%EF%BC%88-shi-ba-%EF%BC%89%EF%BC%9ALombok-gou-zao-han-shu-zhu-ru-xiang-jie-%E3%80%81%40Autowired-ji-zhi-%E3%80%81-fang-fa-yin-yong-%E3%80%81MyBatis-Plus-can-shu-shuo-ming-ji-ID-sheng-cheng-ji-zhi.html</link><description>#### 1. **`@RequiredArgsConstructor` 的作用**

- **功能**：`@RequiredArgsConstructor` 自动生成只包含 `final` 修饰字段的构造函数。</description><guid isPermaLink="true">https://SaVeop.github.io/post/kai-fa-ri-chang-shi-yi-%EF%BC%88-shi-ba-%EF%BC%89%EF%BC%9ALombok-gou-zao-han-shu-zhu-ru-xiang-jie-%E3%80%81%40Autowired-ji-zhi-%E3%80%81-fang-fa-yin-yong-%E3%80%81MyBatis-Plus-can-shu-shuo-ming-ji-ID-sheng-cheng-ji-zhi.html</guid><pubDate>Fri, 01 Aug 2025 10:35:20 +0000</pubDate></item><item><title>开发日常拾遗（十七）：数据库DDL及分类、Mermaid语言、favicon及.bak文件含义、VSCode与IDEA配置、MySQL表结构设计Prompt示例</title><link>https://SaVeop.github.io/post/kai-fa-ri-chang-shi-yi-%EF%BC%88-shi-qi-%EF%BC%89%EF%BC%9A-shu-ju-ku-DDL-ji-fen-lei-%E3%80%81Mermaid-yu-yan-%E3%80%81favicon-ji-.bak-wen-jian-han-yi-%E3%80%81VSCode-yu-IDEA-pei-zhi-%E3%80%81MySQL-biao-jie-gou-she-ji-Prompt-shi-li.html</link><description>### 1. **给出表结构的DDL，这个DDL是什么？**

- **DDL (Data Definition Language)** 是数据库定义语言，主要用于创建、修改、删除数据库对象如表、视图、索引等的结构。</description><guid isPermaLink="true">https://SaVeop.github.io/post/kai-fa-ri-chang-shi-yi-%EF%BC%88-shi-qi-%EF%BC%89%EF%BC%9A-shu-ju-ku-DDL-ji-fen-lei-%E3%80%81Mermaid-yu-yan-%E3%80%81favicon-ji-.bak-wen-jian-han-yi-%E3%80%81VSCode-yu-IDEA-pei-zhi-%E3%80%81MySQL-biao-jie-gou-she-ji-Prompt-shi-li.html</guid><pubDate>Fri, 01 Aug 2025 10:33:35 +0000</pubDate></item><item><title>开发日常拾遗（十六）：浏览器缓存、XSS防护、i18n 国际化、项目启动 Banner、主子表、Vite 错误与 Vue 跳转问题</title><link>https://SaVeop.github.io/post/kai-fa-ri-chang-shi-yi-%EF%BC%88-shi-liu-%EF%BC%89%EF%BC%9A-liu-lan-qi-huan-cun-%E3%80%81XSS-fang-hu-%E3%80%81i18n%20-guo-ji-hua-%E3%80%81-xiang-mu-qi-dong-%20Banner%E3%80%81-zhu-zi-biao-%E3%80%81Vite%20-cuo-wu-yu-%20Vue%20-tiao-zhuan-wen-ti.html</link><description>### 1. 项目中浏览器缓存问题

- **问题**：浏览器缓存导致无法直接显示最新项目页面（如登录页）。</description><guid isPermaLink="true">https://SaVeop.github.io/post/kai-fa-ri-chang-shi-yi-%EF%BC%88-shi-liu-%EF%BC%89%EF%BC%9A-liu-lan-qi-huan-cun-%E3%80%81XSS-fang-hu-%E3%80%81i18n%20-guo-ji-hua-%E3%80%81-xiang-mu-qi-dong-%20Banner%E3%80%81-zhu-zi-biao-%E3%80%81Vite%20-cuo-wu-yu-%20Vue%20-tiao-zhuan-wen-ti.html</guid><pubDate>Fri, 01 Aug 2025 10:32:02 +0000</pubDate></item><item><title>开发日常拾遗（十五）：MyBatis ORM思想、Redis密码取消、RBAC权限控制与若依常用功能</title><link>https://SaVeop.github.io/post/kai-fa-ri-chang-shi-yi-%EF%BC%88-shi-wu-%EF%BC%89%EF%BC%9AMyBatis%20ORM-si-xiang-%E3%80%81Redis-mi-ma-qu-xiao-%E3%80%81RBAC-quan-xian-kong-zhi-yu-ruo-yi-chang-yong-gong-neng.html</link><description>### **1. MyBatis 的 ORM 思想**

- **MyBatis** 是一个基于 **SQL 映射** 的框架，允许开发者手动编写 SQL 查询，并将查询结果映射到 Java 对象。</description><guid isPermaLink="true">https://SaVeop.github.io/post/kai-fa-ri-chang-shi-yi-%EF%BC%88-shi-wu-%EF%BC%89%EF%BC%9AMyBatis%20ORM-si-xiang-%E3%80%81Redis-mi-ma-qu-xiao-%E3%80%81RBAC-quan-xian-kong-zhi-yu-ruo-yi-chang-yong-gong-neng.html</guid><pubDate>Fri, 01 Aug 2025 10:30:45 +0000</pubDate></item><item><title>开发日常拾遗（十四）：NVM安装与使用、npm管理、JavaScript相等比较及前端代码结构梳理</title><link>https://SaVeop.github.io/post/kai-fa-ri-chang-shi-yi-%EF%BC%88-shi-si-%EF%BC%89%EF%BC%9ANVM-an-zhuang-yu-shi-yong-%E3%80%81npm-guan-li-%E3%80%81JavaScript-xiang-deng-bi-jiao-ji-qian-duan-dai-ma-jie-gou-shu-li.html</link><description>### 1. **NVM 安装与使用**

- **NVM (Node Version Manager)** 是一个用于管理 Node.js 版本的工具，可以让你在不同的 Node.js 版本之间切换，安装新版本或卸载旧版本。</description><guid isPermaLink="true">https://SaVeop.github.io/post/kai-fa-ri-chang-shi-yi-%EF%BC%88-shi-si-%EF%BC%89%EF%BC%9ANVM-an-zhuang-yu-shi-yong-%E3%80%81npm-guan-li-%E3%80%81JavaScript-xiang-deng-bi-jiao-ji-qian-duan-dai-ma-jie-gou-shu-li.html</guid><pubDate>Fri, 01 Aug 2025 10:29:47 +0000</pubDate></item><item><title>开发日常拾遗（十三）：NPM全局安装、PowerShell执行策略、ESLint配置、TypeScript类属性与方法、异步请求识别</title><link>https://SaVeop.github.io/post/kai-fa-ri-chang-shi-yi-%EF%BC%88-shi-san-%EF%BC%89%EF%BC%9ANPM-quan-ju-an-zhuang-%E3%80%81PowerShell-zhi-xing-ce-lve-%E3%80%81ESLint-pei-zhi-%E3%80%81TypeScript-lei-shu-xing-yu-fang-fa-%E3%80%81-yi-bu-qing-qiu-shi-bie.html</link><description>### 1. **NPM 全局安装的问题**

- **问题描述**
  在 VSCode 终端中执行 `npm install -g typescript` 后，运行 `tsc -v` 提示 `'tsc' 不是内部或外部命令，也不是可运行的程序或批处理文件`。</description><guid isPermaLink="true">https://SaVeop.github.io/post/kai-fa-ri-chang-shi-yi-%EF%BC%88-shi-san-%EF%BC%89%EF%BC%9ANPM-quan-ju-an-zhuang-%E3%80%81PowerShell-zhi-xing-ce-lve-%E3%80%81ESLint-pei-zhi-%E3%80%81TypeScript-lei-shu-xing-yu-fang-fa-%E3%80%81-yi-bu-qing-qiu-shi-bie.html</guid><pubDate>Fri, 01 Aug 2025 10:28:34 +0000</pubDate></item><item><title>开发日常拾遗（十二）：Vue.js 基础笔记之组件结构、数据绑定、事件处理、条件渲染、HTTP 请求及路由</title><link>https://SaVeop.github.io/post/kai-fa-ri-chang-shi-yi-%EF%BC%88-shi-er-%EF%BC%89%EF%BC%9AVue.js%20-ji-chu-bi-ji-zhi-zu-jian-jie-gou-%E3%80%81-shu-ju-bang-ding-%E3%80%81-shi-jian-chu-li-%E3%80%81-tiao-jian-xuan-ran-%E3%80%81HTTP%20-qing-qiu-ji-lu-you.html</link><description>### Vue.js 基础笔记

#### **1. Vue 组件**

Vue 组件由三部分组成：

- **template**: 用于定义组件的结构（HTML）。</description><guid isPermaLink="true">https://SaVeop.github.io/post/kai-fa-ri-chang-shi-yi-%EF%BC%88-shi-er-%EF%BC%89%EF%BC%9AVue.js%20-ji-chu-bi-ji-zhi-zu-jian-jie-gou-%E3%80%81-shu-ju-bang-ding-%E3%80%81-shi-jian-chu-li-%E3%80%81-tiao-jian-xuan-ran-%E3%80%81HTTP%20-qing-qiu-ji-lu-you.html</guid><pubDate>Fri, 01 Aug 2025 10:26:49 +0000</pubDate></item><item><title>开发日常拾遗（十一）：Java 泛型、Stream map 操作、reduce 累积、类型转换与 Optional 实用场景</title><link>https://SaVeop.github.io/post/kai-fa-ri-chang-shi-yi-%EF%BC%88-shi-yi-%EF%BC%89%EF%BC%9AJava%20-fan-xing-%E3%80%81Stream%20map%20-cao-zuo-%E3%80%81reduce%20-lei-ji-%E3%80%81-lei-xing-zhuan-huan-yu-%20Optional%20-shi-yong-chang-jing.html</link><description>### 1. **Java Stream API 中的 `map` 方法**

- **`map` 方法**：用于将流中的每个元素通过一个指定的转换函数映射到另一个对象，生成一个新的流。</description><guid isPermaLink="true">https://SaVeop.github.io/post/kai-fa-ri-chang-shi-yi-%EF%BC%88-shi-yi-%EF%BC%89%EF%BC%9AJava%20-fan-xing-%E3%80%81Stream%20map%20-cao-zuo-%E3%80%81reduce%20-lei-ji-%E3%80%81-lei-xing-zhuan-huan-yu-%20Optional%20-shi-yong-chang-jing.html</guid><pubDate>Fri, 01 Aug 2025 10:21:08 +0000</pubDate></item><item><title>开发日常拾遗（十）：REST 返回封装、日期参数注解、隐式类型转换、动态 SQL 实战技巧</title><link>https://SaVeop.github.io/post/kai-fa-ri-chang-shi-yi-%EF%BC%88-shi-%EF%BC%89%EF%BC%9AREST%20-fan-hui-feng-zhuang-%E3%80%81-ri-qi-can-shu-zhu-jie-%E3%80%81-yin-shi-lei-xing-zhuan-huan-%E3%80%81-dong-tai-%20SQL%20-shi-zhan-ji-qiao.html</link><description>### **1. REST API 的返回数据**

- REST API 返回数据可以形象地比喻为“快递包裹”：
  - **快递内容**：你实际需要的业务数据（例如 JSON 格式的对象）。</description><guid isPermaLink="true">https://SaVeop.github.io/post/kai-fa-ri-chang-shi-yi-%EF%BC%88-shi-%EF%BC%89%EF%BC%9AREST%20-fan-hui-feng-zhuang-%E3%80%81-ri-qi-can-shu-zhu-jie-%E3%80%81-yin-shi-lei-xing-zhuan-huan-%E3%80%81-dong-tai-%20SQL%20-shi-zhan-ji-qiao.html</guid><pubDate>Fri, 01 Aug 2025 10:19:43 +0000</pubDate></item><item><title>开发日常拾遗（九）：Serializable 与 Lombok、@PathVariable 使用详解、SQL &amp; Redis 错误排查、参数注解对比分析</title><link>https://SaVeop.github.io/post/kai-fa-ri-chang-shi-yi-%EF%BC%88-jiu-%EF%BC%89%EF%BC%9ASerializable%20-yu-%20Lombok%E3%80%81%40PathVariable%20-shi-yong-xiang-jie-%E3%80%81SQL%20%26%20Redis%20-cuo-wu-pai-cha-%E3%80%81-can-shu-zhu-jie-dui-bi-fen-xi.html</link><description>### 1. Serializable 和 Lombok的关系

- 实现 `Serializable` 接口和 Lombok 没有直接关系。</description><guid isPermaLink="true">https://SaVeop.github.io/post/kai-fa-ri-chang-shi-yi-%EF%BC%88-jiu-%EF%BC%89%EF%BC%9ASerializable%20-yu-%20Lombok%E3%80%81%40PathVariable%20-shi-yong-xiang-jie-%E3%80%81SQL%20%26%20Redis%20-cuo-wu-pai-cha-%E3%80%81-can-shu-zhu-jie-dui-bi-fen-xi.html</guid><pubDate>Fri, 01 Aug 2025 10:18:07 +0000</pubDate></item><item><title>开发日常拾遗（八）：TCP连接趣味类比、Spring定时任务踩坑、安装权限报错、CMD技巧与代理机制精讲</title><link>https://SaVeop.github.io/post/kai-fa-ri-chang-shi-yi-%EF%BC%88-ba-%EF%BC%89%EF%BC%9ATCP-lian-jie-qu-wei-lei-bi-%E3%80%81Spring-ding-shi-ren-wu-cai-keng-%E3%80%81-an-zhuang-quan-xian-bao-cuo-%E3%80%81CMD-ji-qiao-yu-dai-li-ji-zhi-jing-jiang.html</link><description>#### **一、TCP连接与生活比喻**

#### **1. 什么是 TCP 连接？**

- TCP（传输控制协议）是一种可靠的、面向连接的通信协议。</description><guid isPermaLink="true">https://SaVeop.github.io/post/kai-fa-ri-chang-shi-yi-%EF%BC%88-ba-%EF%BC%89%EF%BC%9ATCP-lian-jie-qu-wei-lei-bi-%E3%80%81Spring-ding-shi-ren-wu-cai-keng-%E3%80%81-an-zhuang-quan-xian-bao-cuo-%E3%80%81CMD-ji-qiao-yu-dai-li-ji-zhi-jing-jiang.html</guid><pubDate>Fri, 01 Aug 2025 10:16:56 +0000</pubDate></item><item><title>开发日常拾遗（七）：@JsonFormat 注解机制、全局时间格式配置与 Jackson 时间映射小技巧</title><link>https://SaVeop.github.io/post/kai-fa-ri-chang-shi-yi-%EF%BC%88-qi-%EF%BC%89%EF%BC%9A%40JsonFormat%20-zhu-jie-ji-zhi-%E3%80%81-quan-ju-shi-jian-ge-shi-pei-zhi-yu-%20Jackson%20-shi-jian-ying-she-xiao-ji-qiao.html</link><description>### **1. `@JsonFormat` 注解的使用**

- **作用：** `@JsonFormat` 用于指定 JSON 序列化和反序列化时的格式。</description><guid isPermaLink="true">https://SaVeop.github.io/post/kai-fa-ri-chang-shi-yi-%EF%BC%88-qi-%EF%BC%89%EF%BC%9A%40JsonFormat%20-zhu-jie-ji-zhi-%E3%80%81-quan-ju-shi-jian-ge-shi-pei-zhi-yu-%20Jackson%20-shi-jian-ying-she-xiao-ji-qiao.html</guid><pubDate>Fri, 01 Aug 2025 05:54:12 +0000</pubDate></item><item><title>开发日常拾遗（六）：@CachePut 缓存机制解析、Redis 查询实践、JSON 映射与异常排查小技巧</title><link>https://SaVeop.github.io/post/kai-fa-ri-chang-shi-yi-%EF%BC%88-liu-%EF%BC%89%EF%BC%9A%40CachePut%20-huan-cun-ji-zhi-jie-xi-%E3%80%81Redis%20-cha-xun-shi-jian-%E3%80%81JSON%20-ying-she-yu-yi-chang-pai-cha-xiao-ji-qiao.html</link><description>### 1. **Spring Cache 与 `@CachePut` 注解**

- **`@CachePut` 注解** 用于方法执行后，将方法的返回值放入缓存中，而不是从缓存中获取数据。</description><guid isPermaLink="true">https://SaVeop.github.io/post/kai-fa-ri-chang-shi-yi-%EF%BC%88-liu-%EF%BC%89%EF%BC%9A%40CachePut%20-huan-cun-ji-zhi-jie-xi-%E3%80%81Redis%20-cha-xun-shi-jian-%E3%80%81JSON%20-ying-she-yu-yi-chang-pai-cha-xiao-ji-qiao.html</guid><pubDate>Fri, 01 Aug 2025 05:49:19 +0000</pubDate></item><item><title>开发日常拾遗（五）：InputStream打印技巧、微信小程序授权弹窗、Nginx代理、FastJSON解析差异及类型转换陷阱</title><link>https://SaVeop.github.io/post/kai-fa-ri-chang-shi-yi-%EF%BC%88-wu-%EF%BC%89%EF%BC%9AInputStream-da-yin-ji-qiao-%E3%80%81-wei-xin-xiao-cheng-xu-shou-quan-dan-chuang-%E3%80%81Nginx-dai-li-%E3%80%81FastJSON-jie-xi-cha-yi-ji-lei-xing-zhuan-huan-xian-jing.html</link><description>#### **1. 打印 `InputStream` 的内容**

**问题背景：**
在代码中获取 HTTP 响应内容时，想打印 `InputStream` 内容，但直接打印流对象只输出其地址信息。</description><guid isPermaLink="true">https://SaVeop.github.io/post/kai-fa-ri-chang-shi-yi-%EF%BC%88-wu-%EF%BC%89%EF%BC%9AInputStream-da-yin-ji-qiao-%E3%80%81-wei-xin-xiao-cheng-xu-shou-quan-dan-chuang-%E3%80%81Nginx-dai-li-%E3%80%81FastJSON-jie-xi-cha-yi-ji-lei-xing-zhuan-huan-xian-jing.html</guid><pubDate>Fri, 01 Aug 2025 05:48:15 +0000</pubDate></item><item><title>开发日常拾遗（四）：static 机制详解与 Spring Redis 实战应用</title><link>https://SaVeop.github.io/post/kai-fa-ri-chang-shi-yi-%EF%BC%88-si-%EF%BC%89%EF%BC%9Astatic%20-ji-zhi-xiang-jie-yu-%20Spring%20Redis%20-shi-zhan-ying-yong.html</link><description>#### **一、静态变量与静态方法的理解**

##### 1. **静态（`static`）成员的定义和访问**：

- **静态变量（`static` field）** 和 **静态方法（`static` method）** 是属于 **类** 本身的，而不是属于 **类的实例**。</description><guid isPermaLink="true">https://SaVeop.github.io/post/kai-fa-ri-chang-shi-yi-%EF%BC%88-si-%EF%BC%89%EF%BC%9Astatic%20-ji-zhi-xiang-jie-yu-%20Spring%20Redis%20-shi-zhan-ying-yong.html</guid><pubDate>Fri, 01 Aug 2025 05:46:41 +0000</pubDate></item><item><title>开发日常拾遗（三）：事务管理与MyBatis高级配置</title><link>https://SaVeop.github.io/post/kai-fa-ri-chang-shi-yi-%EF%BC%88-san-%EF%BC%89%EF%BC%9A-shi-wu-guan-li-yu-MyBatis-gao-ji-pei-zhi.html</link><description>#### 1. **事务配置及使用**

- **事务注解的使用**：
  使用 `@Transactional` 注解来标识需要进行事务管理的方法或类，通常是在 **service 层**。</description><guid isPermaLink="true">https://SaVeop.github.io/post/kai-fa-ri-chang-shi-yi-%EF%BC%88-san-%EF%BC%89%EF%BC%9A-shi-wu-guan-li-yu-MyBatis-gao-ji-pei-zhi.html</guid><pubDate>Fri, 01 Aug 2025 03:55:16 +0000</pubDate></item><item><title>开发日常拾遗（二）：Spring AOP、JWT 与动态代理核心要点解析</title><link>https://SaVeop.github.io/post/kai-fa-ri-chang-shi-yi-%EF%BC%88-er-%EF%BC%89%EF%BC%9ASpring%20AOP%E3%80%81JWT%20-yu-dong-tai-dai-li-he-xin-yao-dian-jie-xi.html</link><description>#### **1. AOP（面向切面编程）**

- **切面表达式**：
  - AOP 中的切点表达式格式为：`execution([修饰符模式] 返回类型模式 [声明类型模式] 方法名模式(参数模式) [throws模式])`。</description><guid isPermaLink="true">https://SaVeop.github.io/post/kai-fa-ri-chang-shi-yi-%EF%BC%88-er-%EF%BC%89%EF%BC%9ASpring%20AOP%E3%80%81JWT%20-yu-dong-tai-dai-li-he-xin-yao-dian-jie-xi.html</guid><pubDate>Fri, 01 Aug 2025 03:53:43 +0000</pubDate></item><item><title>开发日常拾遗（一）：Spring常见配置问题与Java基础碎片整理</title><link>https://SaVeop.github.io/post/kai-fa-ri-chang-shi-yi-%EF%BC%88-yi-%EF%BC%89%EF%BC%9ASpring-chang-jian-pei-zhi-wen-ti-yu-Java-ji-chu-sui-pian-zheng-li.html</link><description>#### **1. 静态资源加载路径**

- **问题**：`addResourceHandlers` 方法配置的静态资源路径（如 `classpath:/META-INF/resources/`）在项目中找不到。</description><guid isPermaLink="true">https://SaVeop.github.io/post/kai-fa-ri-chang-shi-yi-%EF%BC%88-yi-%EF%BC%89%EF%BC%9ASpring-chang-jian-pei-zhi-wen-ti-yu-Java-ji-chu-sui-pian-zheng-li.html</guid><pubDate>Fri, 01 Aug 2025 03:21:34 +0000</pubDate></item><item><title>学习笔记：2025-2-8</title><link>https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2025-2-8.html</link><description>### **学习笔记：2025-2-8**

------

### **1. Java 中的异常分类**

Java 中的异常分为以下三类：

- **受检异常（Checked Exception）**

  - 继承自 `Exception`，但不包括 `RuntimeException` 及其子类。</description><guid isPermaLink="true">https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2025-2-8.html</guid><pubDate>Sat, 08 Feb 2025 16:32:14 +0000</pubDate></item><item><title>学习笔记：2025-2-6</title><link>https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2025-2-6.html</link><description>### **学习笔记：2025-2-6**

------

### **一、深度分页查询的优化**

#### 1. 问题描述

查询如下 SQL 的效率差异：

1. **慢查询**

   ```sql
   SELECT * FROM tb_sku LIMIT 9000000, 10;
   ```

   - 这条 SQL 从第 9,000,000 行开始取 10 行数据，MySQL 需要扫描和丢弃前面 9,000,000 条记录，效率低下。</description><guid isPermaLink="true">https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2025-2-6.html</guid><pubDate>Thu, 06 Feb 2025 15:41:21 +0000</pubDate></item><item><title>学习笔记：2025-2-5</title><link>https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2025-2-5.html</link><description>### **学习笔记：2025-2-5**

------

### **1. 什么是锁的重入，为什么要锁重入？**

#### **锁重入的含义**

锁重入（Reentrant Lock）指的是**同一个线程在持有锁的情况下，可以多次获得该锁而不会发生死锁**。</description><guid isPermaLink="true">https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2025-2-5.html</guid><pubDate>Wed, 05 Feb 2025 17:49:16 +0000</pubDate></item><item><title>学习笔记：2025-1-30</title><link>https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2025-1-30.html</link><description>### **学习笔记：2025-1-30**

------

### **1. `@RequestParam` vs `@RequestPart`**

在 Spring Boot 中，`@RequestParam` 和 `@RequestPart` 都可以用于处理 `MultipartFile` 类型的文件上传，但它们的作用略有不同：

#### **(1) `@RequestParam('file') MultipartFile file`**

- 适用于**表单普通字段**以及**文件上传**。</description><guid isPermaLink="true">https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2025-1-30.html</guid><pubDate>Thu, 30 Jan 2025 18:11:39 +0000</pubDate></item><item><title>学习笔记：2025-1-28</title><link>https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2025-1-28.html</link><description>### **学习笔记：2025-1-28**

------

### **1. 如何实现演示课程计划上移、下移以及排序的功能**

- **需求说明**: 实现课程计划的排序功能，支持课程条目的上移、下移。</description><guid isPermaLink="true">https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2025-1-28.html</guid><pubDate>Tue, 28 Jan 2025 20:15:00 +0000</pubDate></item><item><title>学习笔记：2025-1-26</title><link>https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2025-1-26.html</link><description>### **学习笔记：2025-1-26**

------

### 1. **NFS 和 GFS 的英文全称**

- NFS: Network File System（网络文件系统）
  - 用于允许计算机通过网络共享文件。</description><guid isPermaLink="true">https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2025-1-26.html</guid><pubDate>Sun, 26 Jan 2025 18:53:36 +0000</pubDate></item><item><title>学习笔记：2025-1-25</title><link>https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2025-1-25.html</link><description>### **学习笔记：2025-1-25**

------

### 1. **Association 和 Collection 标签的区别**

在 MyBatis 的 `resultMap` 中，`association` 和 `collection` 是两个重要的标签，用于映射数据库查询结果到 Java 对象中，但它们的作用不同：

- **`association`**：用于映射一对一关系。</description><guid isPermaLink="true">https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2025-1-25.html</guid><pubDate>Sat, 25 Jan 2025 16:22:37 +0000</pubDate></item><item><title>学习笔记：2025-1-24</title><link>https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2025-1-24.html</link><description>### **学习笔记：2025-1-24**

------

#### **1. MyBatis-Plus 的自动驼峰映射**

- **问题**：MyBatis-Plus 的自动驼峰映射是否默认开启？MyBatis 的自动驼峰映射是否默认关闭？

- **结论**：

  1. MyBatis-Plus

      自动驼峰映射默认是开启的。</description><guid isPermaLink="true">https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2025-1-24.html</guid><pubDate>Fri, 24 Jan 2025 17:27:55 +0000</pubDate></item><item><title>学习笔记：2025-1-23</title><link>https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2025-1-23.html</link><description>### **学习笔记：2025-1-23**

------

### **1. 测试运行时，Mapper 找不到对应的 SQL 映射问题**

##### **问题描述：**

运行以下测试时，抛出了 `NullPointerException` 和 `Invalid bound statement` 错误：

```java
@Test
void testCourseCategory() {
    List&lt;CourseCategoryDto&gt; courseCategoryDtos = courseCategoryMapper.selectTreeNodes('1');
    System.out.println(courseCategoryDtos);
}
```

**报错信息：**

1. **`NullPointerException`**
   发生在 `courseCategoryMapper.selectTreeNodes('1')` 处，表示 `courseCategoryMapper` 为 `null`。</description><guid isPermaLink="true">https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2025-1-23.html</guid><pubDate>Thu, 23 Jan 2025 17:33:01 +0000</pubDate></item><item><title>学习笔记：2025-1-22</title><link>https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2025-1-22.html</link><description>### **学习笔记：2025-1-22**

------

### **1. 为什么前端在浏览器上渲染，不通过前端直接访问后端会有跨域问题？**

**跨域问题产生的原因：**

- 浏览器的同源策略限制。</description><guid isPermaLink="true">https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2025-1-22.html</guid><pubDate>Wed, 22 Jan 2025 20:34:41 +0000</pubDate></item><item><title>学习笔记：2025-1-21</title><link>https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2025-1-21.html</link><description>### **学习笔记：2025-1-21**

------

### 1. `shell:startup` 这个 shell 是什么意思？

`sh` 或 `shell` 是指 **Shell 脚本**，它是一种用来执行系统命令的脚本语言。</description><guid isPermaLink="true">https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2025-1-21.html</guid><pubDate>Tue, 21 Jan 2025 17:42:04 +0000</pubDate></item><item><title>学习笔记：2025-1-20</title><link>https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2025-1-20.html</link><description>### **学习笔记：2025-1-20**

------

### **1. 系统命令说明**

- **`systemctl start docker`**

  - 命令用于启动 **Docker** 服务。</description><guid isPermaLink="true">https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2025-1-20.html</guid><pubDate>Mon, 20 Jan 2025 18:45:35 +0000</pubDate></item><item><title>学习笔记：2025-1-16</title><link>https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2025-1-16.html</link><description>### **学习笔记：2025-1-16**

------

### **1. AtomicInteger 的相关回忆**

- `AtomicInteger` 简介：
  - 是 `java.util.concurrent.atomic` 包中的类。</description><guid isPermaLink="true">https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2025-1-16.html</guid><pubDate>Thu, 16 Jan 2025 16:55:22 +0000</pubDate></item><item><title>学习笔记：2025-1-15</title><link>https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2025-1-15.html</link><description>### **学习笔记：2025-1-15**&#13;
&#13;
------&#13;
&#13;
### **1. 缓存穿透**&#13;
&#13;
&#13;
&#13;
### **和缓存击穿的区别**&#13;
&#13;
1. **缓存穿透**：&#13;
   - **现象**：指查询的数据在缓存和数据库中都不存在，每次请求都会落到数据库，导致数据库压力过大。</description><guid isPermaLink="true">https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2025-1-15.html</guid><pubDate>Wed, 15 Jan 2025 17:04:28 +0000</pubDate></item><item><title>学习笔记：2025-1-13</title><link>https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2025-1-13.html</link><description>### **学习笔记：2025-1-13**&#13;
&#13;
------&#13;
&#13;
### **一、Docker Compose 文件中的 `version`**&#13;
&#13;
- **问题**：`version: '3.2'` 是部署文件的版本还是 Redis 镜像的版本？&#13;
- 解答：&#13;
  - `version` 指的是 **Docker Compose 文件的语法版本**，与 Redis 镜像的版本无关。</description><guid isPermaLink="true">https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2025-1-13.html</guid><pubDate>Mon, 13 Jan 2025 15:01:12 +0000</pubDate></item><item><title>学习笔记：2025-1-12</title><link>https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2025-1-12.html</link><description>### **学习笔记：2025-1-12**&#13;
&#13;
------&#13;
&#13;
### **1. 深度分页的含义**&#13;
&#13;
- **定义**：深度分页指的是在分页查询中，随着页码的增大，需要跳过的数据量也随之增加。</description><guid isPermaLink="true">https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2025-1-12.html</guid><pubDate>Sun, 12 Jan 2025 17:43:35 +0000</pubDate></item><item><title>学习笔记：2025-1-11</title><link>https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2025-1-11.html</link><description>### **学习笔记：2025-1-11**&#13;
&#13;
------&#13;
&#13;
### **1. 什么是 TearDown 方法？**&#13;
&#13;
- **定义：**&#13;
  `TearDown` 方法在测试框架（如 JUnit）中用于清理资源。</description><guid isPermaLink="true">https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2025-1-11.html</guid><pubDate>Sat, 11 Jan 2025 17:01:21 +0000</pubDate></item><item><title>学习笔记：2025-1-10</title><link>https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2025-1-10.html</link><description>### **学习笔记：2025-1-10**&#13;
&#13;
------&#13;
&#13;
#### **1. 什么是 DSL？**&#13;
&#13;
- **DSL** 是 **领域特定语言（Domain-Specific Language）** 的简称。</description><guid isPermaLink="true">https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2025-1-10.html</guid><pubDate>Fri, 10 Jan 2025 18:28:38 +0000</pubDate></item><item><title>学习笔记：2025-1-9</title><link>https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2025-1-9.html</link><description>### **学习笔记：2025-1-9**&#13;
&#13;
------&#13;
&#13;
### 1. 兜底方案&#13;
&#13;
尽管通过多种机制提高了消息的可靠性，仍无法保证MQ消息100%的成功传递。</description><guid isPermaLink="true">https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2025-1-9.html</guid><pubDate>Thu, 09 Jan 2025 15:55:15 +0000</pubDate></item><item><title>学习笔记：2025-1-8</title><link>https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2025-1-8.html</link><description>### **学习笔记：2025-1-8**&#13;
&#13;
------&#13;
&#13;
### 1. **Docker 删除镜像**&#13;
&#13;
- **问题**: 如何删除 Docker 中的镜像？&#13;
&#13;
- 解答:&#13;
&#13;
  - 使用以下命令删除镜像：&#13;
&#13;
    ```bash&#13;
    docker rmi &lt;image_id&gt;&#13;
    ```&#13;
&#13;
  - 如果要删除多个镜像：&#13;
&#13;
    ```bash&#13;
    docker rmi &lt;image_id_1&gt; &lt;image_id_2&gt;&#13;
    ```&#13;
&#13;
  - 如果需要强制删除（即使镜像正在使用中），可以使用：&#13;
&#13;
    ```bash&#13;
    docker rmi -f &lt;image_id&gt;&#13;
    ```&#13;
&#13;
------&#13;
&#13;
### 2. **Nacos 配置问题**&#13;
&#13;
- **问题**: Nacos 配置格式是否正确？&#13;
- 解答:&#13;
  - 配置文件的格式是 YAML，其中有环境变量的引用，比如 `${hm.rabbitmq.host:192.168.142.128}`，这是允许使用的格式，它允许在配置文件中设置默认值。</description><guid isPermaLink="true">https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2025-1-8.html</guid><pubDate>Wed, 08 Jan 2025 17:53:03 +0000</pubDate></item><item><title>学习笔记：2025-1-7</title><link>https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2025-1-7.html</link><description>### **学习笔记：2025-1-7**&#13;
&#13;
------&#13;
&#13;
## **1. Spring Boot 自动配置中的 `JmxAutoConfiguration` 错误**&#13;
&#13;
### **问题：**&#13;
&#13;
日志报错如下：&#13;
&#13;
```vbnet&#13;
java.lang.IllegalStateException: Error processing condition on org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration.mbeanExporter&#13;
```&#13;
&#13;
这种错误通常与 **Spring Boot 自动配置** 处理条件时出错有关，特别是 `JmxAutoConfiguration` 的 `mbeanExporter` 配置没有正确处理。</description><guid isPermaLink="true">https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2025-1-7.html</guid><pubDate>Tue, 07 Jan 2025 17:43:43 +0000</pubDate></item><item><title>学习笔记：2025-1-6</title><link>https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2025-1-6.html</link><description>### **学习笔记：2025-1-6**&#13;
&#13;
------&#13;
&#13;
#### 1. **命令参数的含义**&#13;
&#13;
##### 问题：&#13;
&#13;
`rm -rf *.tar` 中 `-rf` 的含义是什么？&#13;
&#13;
##### 解答：&#13;
&#13;
- **`-r`**：递归删除目录及其内容。</description><guid isPermaLink="true">https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2025-1-6.html</guid><pubDate>Mon, 06 Jan 2025 18:39:35 +0000</pubDate></item><item><title>学习笔记：2025-1-4</title><link>https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2025-1-4.html</link><description>### **学习笔记：2025-1-4**&#13;
&#13;
------&#13;
&#13;
#### **1. 线程休眠 0.5 秒的方法**&#13;
&#13;
在 Java 中，让线程休眠（暂停执行）**0.5秒**可以使用 `Thread.sleep` 方法。</description><guid isPermaLink="true">https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2025-1-4.html</guid><pubDate>Sat, 04 Jan 2025 17:52:36 +0000</pubDate></item><item><title>学习笔记：2025-1-3</title><link>https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2025-1-3.html</link><description>### **学习笔记：2025-1-3**&#13;
&#13;
------&#13;
&#13;
# 综合笔记：从Spring MySQL连接问题到QPS解释&#13;
&#13;
## **1. Docker容器中MySQL服务的开机自启**&#13;
&#13;
### 方法：&#13;
&#13;
在 Docker 中，设置 MySQL 容器开机自启可以通过以下方式实现：&#13;
&#13;
1. 使用 `--restart` 参数：&#13;
&#13;
   ```bash&#13;
   docker run --name mysql-container -e MYSQL_ROOT_PASSWORD=123456 -d --restart always mysql:latest&#13;
   ```&#13;
&#13;
   - `--restart always`：表示无论容器是否正常退出，都自动重启。</description><guid isPermaLink="true">https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2025-1-3.html</guid><pubDate>Fri, 03 Jan 2025 17:31:41 +0000</pubDate></item><item><title>学习笔记：2025-1-2</title><link>https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2025-1-2.html</link><description>### **学习笔记：2025-1-2**&#13;
&#13;
------&#13;
&#13;
### **1. -Dserver.port 参数问题**&#13;
&#13;
**问题：** 在 IDEA 的运行配置中，如何指定端口参数？&#13;
&#13;
1. 在运行配置的 '程序参数 (Program Arguments)' 中指定：&#13;
&#13;
   ```reStructuredText&#13;
   --server.port=8083&#13;
   ```&#13;
&#13;
2. 在运行配置的 '虚拟机选项 (VM Options)' 中使用：&#13;
&#13;
   ```reStructuredText&#13;
   -Dserver.port=8083&#13;
   ```&#13;
&#13;
**总结：**&#13;
&#13;
- `--server.port` 是 Spring Boot 的参数，通过程序参数指定。</description><guid isPermaLink="true">https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2025-1-2.html</guid><pubDate>Thu, 02 Jan 2025 16:50:24 +0000</pubDate></item><item><title>学习笔记：2025-1-1</title><link>https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2025-1-1.html</link><description>### **学习笔记：2025-1-1**&#13;
&#13;
------&#13;
&#13;
### 1. Spring Cloud 与 Nacos 配置、服务映射问题分析&#13;
&#13;
#### 1. **问题背景与初步分析**&#13;
&#13;
- 遇到的问题是在本地 Spring Cloud 应用中，服务连接到 Nacos 时，发现 Nacos 服务在虚拟机上运行，但在日志中显示服务的 IP 地址为 `192.168.142.1`，而实际上该服务是在本地运行的。</description><guid isPermaLink="true">https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2025-1-1.html</guid><pubDate>Wed, 01 Jan 2025 18:04:40 +0000</pubDate></item><item><title>学习笔记：2024-12-31</title><link>https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2024-12-31.html</link><description>### **学习笔记：2024-12-31**&#13;
&#13;
------&#13;
&#13;
### **Docker 镜像下载和运行 nacos 容器的相关问题**&#13;
&#13;
### **1. Docker 中如何下载镜像**&#13;
&#13;
- **基本命令**：&#13;
&#13;
  ```bash&#13;
  docker pull &lt;镜像名&gt;:&lt;标签&gt;&#13;
  ```&#13;
&#13;
  - 如果省略标签，默认下载 `latest` 版本。</description><guid isPermaLink="true">https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2024-12-31.html</guid><pubDate>Tue, 31 Dec 2024 17:55:37 +0000</pubDate></item><item><title>学习笔记：2024-12-30</title><link>https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2024-12-30.html</link><description>### **学习笔记：2024-12-30**&#13;
&#13;
------&#13;
&#13;
### **1. Linux 中的 `.`、`./` 和 `/` 的含义**&#13;
&#13;
- **`.`（当前目录）**：&#13;
&#13;
  - - 表示当前目录，是一个相对路径标识。</description><guid isPermaLink="true">https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2024-12-30.html</guid><pubDate>Mon, 30 Dec 2024 17:47:30 +0000</pubDate></item><item><title>学习笔记：2024-12-29</title><link>https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2024-12-29.html</link><description>### **学习笔记：2024-12-29**&#13;
&#13;
------&#13;
&#13;
### 1. **虚拟机和宿主机概念**&#13;
&#13;
- **宿主机（Host Machine）**：是物理机器，运行虚拟化软件的机器。</description><guid isPermaLink="true">https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2024-12-29.html</guid><pubDate>Sun, 29 Dec 2024 17:55:10 +0000</pubDate></item><item><title>学习笔记：2024-12-28</title><link>https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2024-12-28.html</link><description>### **学习笔记：2024-12-28**&#13;
&#13;
------&#13;
&#13;
### **1. 关于 `lambdaQuery()` 的参数引用问题**&#13;
&#13;
- **问题描述**： `lambdaQuery().like(userName != null &amp;&amp; userName != '', UserQuery::getName, userName)` 中，`UserQuery::getName` 报错，提示无法从 static 上下文引用非 static 方法。</description><guid isPermaLink="true">https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2024-12-28.html</guid><pubDate>Sat, 28 Dec 2024 17:57:20 +0000</pubDate></item><item><title>学习笔记：2024-12-27</title><link>https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2024-12-27.html</link><description>### **学习笔记：2024-12-27**&#13;
&#13;
------&#13;
&#13;
#### 1. **`@RequiredArgsConstructor` 的作用**&#13;
&#13;
- **功能**：`@RequiredArgsConstructor` 自动生成只包含 `final` 修饰字段的构造函数。</description><guid isPermaLink="true">https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2024-12-27.html</guid><pubDate>Fri, 27 Dec 2024 18:17:07 +0000</pubDate></item><item><title>学习笔记：2024-12-25</title><link>https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2024-12-25.html</link><description>### **学习笔记：2024-12-25**&#13;
&#13;
------&#13;
&#13;
### 1. **给出表结构的DDL，这个DDL是什么？**&#13;
&#13;
- **DDL (Data Definition Language)** 是数据库定义语言，主要用于创建、修改、删除数据库对象如表、视图、索引等的结构。</description><guid isPermaLink="true">https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2024-12-25.html</guid><pubDate>Wed, 25 Dec 2024 18:01:09 +0000</pubDate></item><item><title>学习笔记：2024-12-24</title><link>https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2024-12-24.html</link><description>### **学习笔记：2024-12-24**&#13;
&#13;
------&#13;
&#13;
### 1. 项目中浏览器缓存问题&#13;
&#13;
- **问题**：浏览器缓存导致无法直接显示最新项目页面（如登录页）。</description><guid isPermaLink="true">https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2024-12-24.html</guid><pubDate>Tue, 24 Dec 2024 18:06:52 +0000</pubDate></item><item><title>学习笔记：2024-12-23</title><link>https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2024-12-23.html</link><description>### **学习笔记：2024-12-23**&#13;
&#13;
------&#13;
&#13;
### **1. MyBatis 的 ORM 思想**&#13;
&#13;
- **MyBatis** 是一个基于 **SQL 映射** 的框架，允许开发者手动编写 SQL 查询，并将查询结果映射到 Java 对象。</description><guid isPermaLink="true">https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2024-12-23.html</guid><pubDate>Mon, 23 Dec 2024 16:46:47 +0000</pubDate></item><item><title>学习笔记：2024-12-22</title><link>https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2024-12-22.html</link><description>### 学习笔记：2024-12-22&#13;
&#13;
------&#13;
&#13;
### 1. **NVM 安装与使用**&#13;
&#13;
- **NVM (Node Version Manager)** 是一个用于管理 Node.js 版本的工具，可以让你在不同的 Node.js 版本之间切换，安装新版本或卸载旧版本。</description><guid isPermaLink="true">https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2024-12-22.html</guid><pubDate>Sun, 22 Dec 2024 14:25:47 +0000</pubDate></item><item><title>学习笔记：2024-12-21</title><link>https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2024-12-21.html</link><description>### 学习笔记：2024-12-21&#13;
&#13;
------&#13;
&#13;
### 1. **NPM 全局安装的问题**&#13;
&#13;
- **问题描述**&#13;
  在 VSCode 终端中执行 `npm install -g typescript` 后，运行 `tsc -v` 提示 `'tsc' 不是内部或外部命令，也不是可运行的程序或批处理文件`。</description><guid isPermaLink="true">https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2024-12-21.html</guid><pubDate>Sat, 21 Dec 2024 14:12:30 +0000</pubDate></item><item><title>学习笔记：2024-12-20</title><link>https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2024-12-20.html</link><description>### 学习笔记：2024-12-20&#13;
&#13;
------&#13;
&#13;
### Vue.js 基础笔记&#13;
&#13;
#### **1. Vue 组件**&#13;
&#13;
Vue 组件由三部分组成：&#13;
&#13;
- **template**: 用于定义组件的结构（HTML）。</description><guid isPermaLink="true">https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2024-12-20.html</guid><pubDate>Fri, 20 Dec 2024 12:44:07 +0000</pubDate></item><item><title>学习笔记：2024-12-19</title><link>https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2024-12-19.html</link><description>### 学习笔记：2024-12-19&#13;
&#13;
------&#13;
&#13;
### 1. **Java Stream API 中的 `map` 方法**&#13;
&#13;
- **`map` 方法**：用于将流中的每个元素通过一个指定的转换函数映射到另一个对象，生成一个新的流。</description><guid isPermaLink="true">https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2024-12-19.html</guid><pubDate>Thu, 19 Dec 2024 14:19:38 +0000</pubDate></item><item><title>学习笔记：2024-12-18</title><link>https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2024-12-18.html</link><description>### **学习笔记：2024-12-18**&#13;
&#13;
------&#13;
&#13;
### **1. REST API 的返回数据**&#13;
&#13;
- REST API 返回数据可以形象地比喻为“快递包裹”：&#13;
  - **快递内容**：你实际需要的业务数据（例如 JSON 格式的对象）。</description><guid isPermaLink="true">https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2024-12-18.html</guid><pubDate>Wed, 18 Dec 2024 13:20:14 +0000</pubDate></item><item><title>学习笔记：2024-12-17</title><link>https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2024-12-17.html</link><description>### **学习笔记：2024-12-17**&#13;
&#13;
------&#13;
&#13;
### 1. Serializable 和 Lombok的关系&#13;
&#13;
- 实现 `Serializable` 接口和 Lombok 没有直接关系。</description><guid isPermaLink="true">https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2024-12-17.html</guid><pubDate>Tue, 17 Dec 2024 16:12:37 +0000</pubDate></item><item><title>学习笔记：2024-12-15</title><link>https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2024-12-15.html</link><description>#### **一、TCP连接与生活比喻**&#13;
&#13;
#### **1. 什么是 TCP 连接？**&#13;
&#13;
- TCP（传输控制协议）是一种可靠的、面向连接的通信协议。</description><guid isPermaLink="true">https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2024-12-15.html</guid><pubDate>Sun, 15 Dec 2024 14:29:10 +0000</pubDate></item><item><title>学习笔记：2024-12-14</title><link>https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2024-12-14.html</link><description>### **学习笔记：2024-12-14**&#13;
&#13;
------&#13;
&#13;
### **1. `@JsonFormat` 注解的使用**&#13;
&#13;
- **作用：** `@JsonFormat` 用于指定 JSON 序列化和反序列化时的格式。</description><guid isPermaLink="true">https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2024-12-14.html</guid><pubDate>Sat, 14 Dec 2024 17:26:10 +0000</pubDate></item><item><title>学习笔记：2024-12-13</title><link>https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2024-12-13.html</link><description>### **学习笔记：2024-12-13**&#13;
&#13;
------&#13;
&#13;
### 1. **Spring Cache 与 `@CachePut` 注解**&#13;
&#13;
- **`@CachePut` 注解** 用于方法执行后，将方法的返回值放入缓存中，而不是从缓存中获取数据。</description><guid isPermaLink="true">https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2024-12-13.html</guid><pubDate>Fri, 13 Dec 2024 13:33:21 +0000</pubDate></item><item><title>学习笔记：2024-12-12</title><link>https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2024-12-12.html</link><description>### **学习笔记：2024-12-12**&#13;
&#13;
------&#13;
&#13;
#### **1. 打印 `InputStream` 的内容**&#13;
&#13;
**问题背景：**&#13;
在代码中获取 HTTP 响应内容时，想打印 `InputStream` 内容，但直接打印流对象只输出其地址信息。</description><guid isPermaLink="true">https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2024-12-12.html</guid><pubDate>Thu, 12 Dec 2024 14:27:33 +0000</pubDate></item><item><title>学习笔记：2024-12-11</title><link>https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2024-12-11.html</link><description>### **学习笔记：2024-12-11**&#13;
&#13;
------&#13;
&#13;
- #### **一、静态变量与静态方法的理解**&#13;
&#13;
  ##### 1. **静态（`static`）成员的定义和访问**：&#13;
&#13;
  - **静态变量（`static` field）** 和 **静态方法（`static` method）** 是属于 **类** 本身的，而不是属于 **类的实例**。</description><guid isPermaLink="true">https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2024-12-11.html</guid><pubDate>Wed, 11 Dec 2024 13:22:47 +0000</pubDate></item><item><title>学习笔记：2024-12-10</title><link>https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2024-12-10.html</link><description>### **学习笔记：2024-12-10**&#13;
&#13;
------&#13;
&#13;
#### 1. **事务配置及使用**&#13;
&#13;
- **事务注解的使用**：&#13;
  使用 `@Transactional` 注解来标识需要进行事务管理的方法或类，通常是在 **service 层**。</description><guid isPermaLink="true">https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2024-12-10.html</guid><pubDate>Tue, 10 Dec 2024 16:45:52 +0000</pubDate></item><item><title>学习笔记：2024-12-09</title><link>https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2024-12-09.html</link><description>### 学习笔记：2024-12-09&#13;
&#13;
------&#13;
&#13;
#### **1. AOP（面向切面编程）**&#13;
&#13;
- **切面表达式**：&#13;
  - AOP 中的切点表达式格式为：`execution([修饰符模式] 返回类型模式 [声明类型模式] 方法名模式(参数模式) [throws模式])`。</description><guid isPermaLink="true">https://SaVeop.github.io/post/xue-xi-bi-ji-%EF%BC%9A2024-12-09.html</guid><pubDate>Mon, 09 Dec 2024 14:48:41 +0000</pubDate></item></channel></rss>